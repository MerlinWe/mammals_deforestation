dat_2 <- Merge(length_2, strength_2, thickness_2, breaking_point_2, all = TRUE, id = ~ replicate + treatment)
colnames(dat_2) <- c("replicate", "treatment", "mean_length_8", "mean_strength_8", "mean_thickness_8", "mean_breakp_8")
#### Merge dat 1 & 2
dat_all <- Merge(dat_1, dat_2, all = TRUE, id = ~ replicate + treatment) # merge data
write.csv(dat_all, file="urchins_stats.csv", row.names = FALSE) # write table
keep(dat_all, sure = TRUE) # clean gl. env.
## Calculate diff variables
dat_all$diff_length <- dat_all$mean_length_8-dat_all$mean_length_0
dat_all$diff_strength <- dat_all$mean_strength_8-dat_all$mean_strength_0
dat_all$diff_thickness <- dat_all$mean_thickness_8-dat_all$mean_thickness_0
dat_all$diff_breakp <- dat_all$mean_breakp_8-dat_all$mean_breakp_0
##### Statistics... (YAY!) #####
# check distribution
hist(dat_all$diff_length) # bad
hist(dat_all$diff_strength) # okay-ish
hist(dat_all$diff_thickness) # bad bad bad
hist(dat_all$diff_breakp) # okay-ish#
# as the majority of response variables are not normally distributed, a non paramteric test
# First we transform the data into long format (easier)
dat <- reshape2::melt(select(dat_all, treatment, replicate, diff_length, diff_strength, diff_thickness, diff_breakp),
id.vars = c("treatment", "replicate"))
dat$value <- as.numeric(dat$value) # set numeric
dat$treatment <- as.factor(dat$treatment)
dat$replicate <- as.factor(dat$replicate)
length_test <- subset(dat, variable == "diff_length")  %>% friedman_test(value ~ treatment|replicate)
length_test
strength_test <- subset(dat, variable == "diff_strength")  %>% friedman_test(value ~ treatment|replicate)
strength_test
thickness_test <- subset(dat, variable == "diff_thickness")  %>% friedman_test(value ~ treatment|replicate)
thickness_test
cor(dat_all$diff_length, dat_all$diff_thickness, method = "spearman")
breakp_test <- subset(dat, variable == "diff_breakp")  %>% friedman_test(value ~ treatment|replicate)
breakp_test
frdAllPairsSiegelTest(y      = subset(dat, behaviour == "diff_strength")$value,
groups = subset(dat, behaviour == "diff_strength")$treatment,
blocks = subset(dat, behaviour == "diff_strength")$replicate,
p.adjust.method = "bonferroni")
frdAllPairsSiegelTest(y      = subset(dat, variable == "diff_strength")$value,
groups = subset(dat, variable == "diff_strength")$treatment,
blocks = subset(dat, variable == "diff_strength")$replicate,
p.adjust.method = "bonferroni")
strength_test <- subset(dat, variable == "diff_strength")  %>% friedman_test(value ~ treatment|replicate)
strength_test # here we need to do a pairwise comparsion
load("/Users/serpent/OneDrive - Van Hall Larenstein/Thesis/Scripts/OccModel/occMod.RData")
dat <- dplyr::select(recordTable, Trivial, Classification, Station, period, Station_old_name)
dat2 <- dplyr::select(camtraps, Station, forcov, foredg)
dat <- Merge(dat, dat2, id = ~Station)
dat <- mutate(dat, habitat_affinity = ifelse(grepl("lowland_paca", Trivial), "FS",
ifelse(grepl("jaguar", Trivial), "FS",
ifelse(grepl("bolivian_squirrel", Trivial), "FS",
ifelse(grepl("collared_peccary", Trivial), "FS",
ifelse(grepl("gray_brocket_deer", Trivial), "DA",
ifelse(grepl("white-lipped_peccary" , Trivial), "FS",
ifelse(grepl("central_american_agouti", Trivial), "FS",
ifelse(grepl("south_american_coati" , Trivial), "FS",
ifelse(grepl("tapeti" , Trivial), "FS",
ifelse(grepl("tufted_capuchin" , Trivial), "FS",
ifelse(grepl("jaguarundi", Trivial), "FS",
ifelse(grepl("nine-banded_armadillo", Trivial), "DA",
ifelse(grepl("crab-eating_raccoon" , Trivial), "DA",
ifelse(grepl("yellow_armadillo" , Trivial), "DA",
ifelse(grepl("ocelot", Trivial), "FS",
ifelse(grepl("margay", Trivial), "FS",
ifelse(grepl("tamandua", Trivial), "FS",
ifelse(grepl("capybara", Trivial), "DA",
ifelse(grepl("tayra", Trivial), "FS",
ifelse(grepl("crab-eating_fox", Trivial), "DA",
ifelse(grepl("puma", Trivial), "FS",
ifelse(grepl("common_opossum", Trivial), "DA",
ifelse(grepl("south_american_tapir", Trivial), "FS",
ifelse(grepl("giant_anteater", Trivial), "FS", NA)))))))))))))))))))))))))
library(tidyverse) # data manipulation
library(Hmisc)     # data wrangling
dat <- dplyr::select(recordTable, Trivial, Classification, Station, period, Station_old_name)
dat2 <- dplyr::select(camtraps, Station, forcov, foredg)
dat <- Merge(dat, dat2, id = ~Station)
dat <- mutate(dat, habitat_affinity = ifelse(grepl("lowland_paca", Trivial), "FS",
ifelse(grepl("jaguar", Trivial), "FS",
ifelse(grepl("bolivian_squirrel", Trivial), "FS",
ifelse(grepl("collared_peccary", Trivial), "FS",
ifelse(grepl("gray_brocket_deer", Trivial), "DA",
ifelse(grepl("white-lipped_peccary" , Trivial), "FS",
ifelse(grepl("central_american_agouti", Trivial), "FS",
ifelse(grepl("south_american_coati" , Trivial), "FS",
ifelse(grepl("tapeti" , Trivial), "FS",
ifelse(grepl("tufted_capuchin" , Trivial), "FS",
ifelse(grepl("jaguarundi", Trivial), "FS",
ifelse(grepl("nine-banded_armadillo", Trivial), "DA",
ifelse(grepl("crab-eating_raccoon" , Trivial), "DA",
ifelse(grepl("yellow_armadillo" , Trivial), "DA",
ifelse(grepl("ocelot", Trivial), "FS",
ifelse(grepl("margay", Trivial), "FS",
ifelse(grepl("tamandua", Trivial), "FS",
ifelse(grepl("capybara", Trivial), "DA",
ifelse(grepl("tayra", Trivial), "FS",
ifelse(grepl("crab-eating_fox", Trivial), "DA",
ifelse(grepl("puma", Trivial), "FS",
ifelse(grepl("common_opossum", Trivial), "DA",
ifelse(grepl("south_american_tapir", Trivial), "FS",
ifelse(grepl("giant_anteater", Trivial), "FS", NA)))))))))))))))))))))))))
dat$habitat_affinity <- as.factor(dat$habitat_affinity)
rm(dat2)
View(dat)
prop <- aggregate(dat$habitat_affinity, by = list(Station = dat$Station), FUN = function(x) {
prop.table(table(x))
})
View(prop)
dat <- dplyr::select(recordTable, Trivial, Classification, Station, period, Station_old_name)
dat2 <- dplyr::select(camtraps, Station, forcov, foredg)
View(dat)
dat <- na.omit(dat)
View(dat2)
dat <- Merge(dat, dat2, id = ~Station)
View(dat)
dat <-na.omit(dat)
dat <- dplyr::select(recordTable, Trivial, Classification, Station, period, Station_old_name)
dat2 <- dplyr::select(camtraps, Station, forcov, foredg)
dat <- Merge(dat, dat2, id = ~Station)
dat <- na.omit(dat)
rm(dat2)
dat <- mutate(dat, habitat_affinity = ifelse(grepl("lowland_paca", Trivial), "FS",
ifelse(grepl("jaguar", Trivial), "FS",
ifelse(grepl("bolivian_squirrel", Trivial), "FS",
ifelse(grepl("collared_peccary", Trivial), "FS",
ifelse(grepl("gray_brocket_deer", Trivial), "DA",
ifelse(grepl("white-lipped_peccary" , Trivial), "FS",
ifelse(grepl("central_american_agouti", Trivial), "FS",
ifelse(grepl("south_american_coati" , Trivial), "FS",
ifelse(grepl("tapeti" , Trivial), "FS",
ifelse(grepl("tufted_capuchin" , Trivial), "FS",
ifelse(grepl("jaguarundi", Trivial), "FS",
ifelse(grepl("nine-banded_armadillo", Trivial), "DA",
ifelse(grepl("crab-eating_raccoon" , Trivial), "DA",
ifelse(grepl("yellow_armadillo" , Trivial), "DA",
ifelse(grepl("ocelot", Trivial), "FS",
ifelse(grepl("margay", Trivial), "FS",
ifelse(grepl("tamandua", Trivial), "FS",
ifelse(grepl("capybara", Trivial), "DA",
ifelse(grepl("tayra", Trivial), "FS",
ifelse(grepl("crab-eating_fox", Trivial), "DA",
ifelse(grepl("puma", Trivial), "FS",
ifelse(grepl("common_opossum", Trivial), "DA",
ifelse(grepl("south_american_tapir", Trivial), "FS",
ifelse(grepl("giant_anteater", Trivial), "FS", NA)))))))))))))))))))))))))
View(dat)
dat$habitat_affinity <- as.factor(dat$habitat_affinity)
prop <- aggregate(dat$habitat_affinity, by = list(Station = dat$Station), FUN = function(x) {
prop.table(table(x))
})
View(prop)
values <- as.data.frame(prop$x)
prop <- data.frame(cbind(prop$Station, values))
colnames(prop) <- c("Station", "DA_prop", "FS_prop")
View(prop)
new <- Merge(prop, camtraps[c(1,4,5)], id = ~Station)
View(new)
dat <- Merge(prop, camtraps[c(1,4,5)], id = ~Station)
dat <- na.omit(dat)
test <- reshape2::melt(dat, id.vars = c("Station", "forcov", "foredg"))
ggplot(test)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
ggplot(test)+
geom_point(aes(x=foredg, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=foredg, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest edge length (m)")+
ylab(NULL)
plot(dat$DA_prop)
plot(dat$FS_prop)
plot(dat$forcov)
plot(dat$foredg)
hist(dat$DA_prop)
hist(dat$FS_prop)
hist(dat$forcov)
hist(dat$foredg)
hist(log(dat$forcov+.1))
hist(sqrt(dat$forcov+.1))
hist(log(dat$foredg+.1))
hist(sqrt(dat$foredg+.1))
dat$forcov <- sqrt(dat$forcov+.1)
dat$foredg <- log(dat$foredg+.1)
cor(dat$forcov, dat$foredg)
# excellent
ggplot(dat, aes(x= forcov, y = FS_prop))+
geom_point(size = .2)+
geom_smooth(method = lm, formula = "y~x",
color = "red", fill = "69b3a2", se = TRUE)+
theme_bw()
# not so much
ggplot(dat, aes(x= foredg, y = DA_prop))+
geom_point(size = .2)+
geom_smooth(method = lm, formula = "y~x",
color = "red", fill = "69b3a2", se = TRUE)+
theme_bw()
fs_mod1 <- glm(FS_prop ~ forcov + foredg, family = "gaussian", data = dat)
summary(fs_mod1) # examine model
drop1(fs_mod1)   # outcrop can be dropped
fs_mod2 <- glm(FS_prop ~ forcov, family = "gaussian", data = dat)
summary(fs_mod2)
#### Does a lm make sense?
## --- 1. Outliers ---
plot(dat$DA_prop)
plot(dat$FS_prop)
plot(dat$forcov)
plot(dat$foredg)
## --- 2. Normality ---
hist(dat$DA_prop)
hist(dat$FS_prop)
hist(dat$forcov)
hist(dat$foredg)
## => See if transformation improves data structure
hist(log(dat$forcov+.1))
hist(sqrt(dat$forcov+.1))
hist(log(dat$foredg+.1))
hist(sqrt(dat$foredg+.1))
dat$forcov <- sqrt(dat$forcov+.1)
dat$foredg <- log(dat$foredg+.1)
## --- 3. Collinearity ---
cor(dat$forcov, dat$foredg)
## --- 4. X~Y Relationships ---
# excellent
ggplot(dat, aes(x= forcov, y = FS_prop))+
geom_point(size = .2)+
geom_smooth(method = lm, formula = "y~x",
color = "red", fill = "69b3a2", se = TRUE)+
theme_bw()
# not so much
ggplot(dat, aes(x= foredg, y = DA_prop))+
geom_point(size = .2)+
geom_smooth(method = lm, formula = "y~x",
color = "red", fill = "69b3a2", se = TRUE)+
theme_bw()
######################## Modelling ########################
fs_mod1 <- glm(FS_prop ~ forcov + foredg, family = "gaussian", data = dat)
summary(fs_mod1) # examine model
drop1(fs_mod1)   # outcrop can be dropped
fs_mod2 <- glm(FS_prop ~ forcov, family = "gaussian", data = dat)
summary(fs_mod2)
FS <- Effect(c("forcov"), fs_mod2)
library(ggeffects)
library(effects)
# excellent
ggplot(dat, aes(x= forcov, y = FS_prop))+
geom_point(size = .2)+
geom_smooth(method = lm, formula = "y~x",
color = "red", fill = "69b3a2", se = TRUE)+
theme_bw()
# not so much
ggplot(dat, aes(x= foredg, y = DA_prop))+
geom_point(size = .2)+
geom_smooth(method = lm, formula = "y~x",
color = "red", fill = "69b3a2", se = TRUE)+
theme_bw()
######################## Modelling ########################
fs_mod1 <- glm(FS_prop ~ forcov + foredg, family = "gaussian", data = dat)
summary(fs_mod1) # examine model
drop1(fs_mod1)   # outcrop can be dropped
fs_mod2 <- glm(FS_prop ~ forcov, family = "gaussian", data = dat)
summary(fs_mod2)
FS <- Effect(c("forcov"), fs_mod2)
## Validate model
res_p = simulateResiduals(fs_mod2)
library(effects)
library(DHARMa)
######################## Modelling ########################
fs_mod1 <- glm(FS_prop ~ forcov + foredg, family = "gaussian", data = dat)
summary(fs_mod1) # examine model
drop1(fs_mod1)   # outcrop can be dropped
fs_mod2 <- glm(FS_prop ~ forcov, family = "gaussian", data = dat)
summary(fs_mod2)
FS <- Effect(c("forcov"), fs_mod2)
## Validate model
res_p = simulateResiduals(fs_mod2)
plot(res_p, rank = T)
testZeroInflation(res_p)
testDispersion(res_p)
plotResiduals(res_p, form = dat$forcov)
da_mod1 <- glm(DA_prop ~ forcov + foredg, family = "gaussian", data = dat)
summary(da_mod1) # examine model
drop1(da_mod1)   # outcrop can be dropped
da_mod2 <- glm(DA_prop ~ forcov, family = "gaussian", data = dat)
summary(da_mod2)
DA <- Effect(c("forcov"), da_mod2)
## Validate model
res_p = simulateResiduals(da_mod2)
plot(res_p, rank = T)
testZeroInflation(res_p)
testDispersion(res_p)
plotResiduals(res_p, form = dat$forcov)
DA <- DA$data
FS <- FS$data
dat <- data.frame(cbind(DA, FS))
dat <- dat[, 1:3]
new <- reshape2::melt(dat, id.vars = c("forcov"))
ggplot(new)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
ggplot(new)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
geom_label(aes(label = variable), nudge_x = 0.35, size = 4) +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
ggplot(new)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
geom_label(aes(x=forcov, y=value, group = variable, label = variable), nudge_x = 0.35, size = 4) +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
ggplot(new)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
geom_label(aes(x=forcov, y=value, label = variable), nudge_x = 0.35, size = 4) +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
ggplot(new)+
# geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
#            alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
geom_label(aes(x=forcov, y=value, label = variable), nudge_x = 0.35, size = 4) +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
ggplot(new)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
geom_label(aes(x=forcov, y=value, label = variable), nudge_x = 0.35, size = 4) +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
library(ggrepel)
ggplot(new)+
geom_point(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
alpha = .4, size = .5)+
geom_smooth(aes(x=forcov, y=value, group = variable, fill = variable, color = variable),
se = FALSE, method = "lm") +
#geom_label_repel(aes(x=, y=value, label = "Forest specialists")) +
#geom_label_repel(aes(x=forcov, y=value, label = "Disturbance adapted")) +
scale_color_manual(values = c("black", "forestgreen"))+
theme_linedraw() +
theme(axis.text.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.text.x = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.y = element_text(face = 1, size = 6, family="Times New Roman"),
axis.title.x = element_text(face = 1, size = 6, family="Times New Roman"),
plot.title = element_text(face = 1, size = 6, family="Times New Roman"),
plot.caption = element_text(face = 1, size = 6, family="Times New Roman"),
plot.subtitle = element_text(face = 1, size = 6, family="Times New Roman"),
legend.text = element_text(face = 1, size = 6, family="Times New Roman"),
legend.title = element_text(face = 1, size = 6, family="Times New Roman"),
legend.position = "none")+
xlab("Forest cover %")+
ylab("Proportion in community")
dat <- read.csv("/Users/serpent/OneDrive - Van Hall Larenstein/LNV & RAAK/OVP Paper/ovp_data.csv")
summary(unique(dat$ID))
dat <- read.csv("/Users/serpent/OneDrive - Van Hall Larenstein/Minor Int. Wildlife Management/RAAK Pro/Data/Database/OVP_data_all.(no_acc).csv")
summary(unique(dat$ID))
setwd("/Users/serpent/OneDrive - Van Hall Larenstein/Minor Int. Wildlife Management/RAAK Pro/R/Statistics")
dat.all <- read.csv("/Users/serpent/OneDrive - Van Hall Larenstein/Minor Int. Wildlife Management/RAAK Pro/Data/Database/OVP_data_all.(no_acc).csv")
summary(unique(dat$ID))
dat <- read.csv("/Users/serpent/OneDrive - Van Hall Larenstein/Minor Int. Wildlife Management/RAAK Pro/R/OVP_10 Full/OVP10_all.csv")
View(dat)
plot(dat$Ibutton_Temp, dat$CollarTemp)
cor(dat$Ibutton_Temp, dat$CollarTemp)
new <- select(dat, Ibutton_Temp, CollarTemp)
library(tidyverse)
new <- select(dat, Ibutton_Temp, CollarTemp)
plot(new$Ibutton_Temp, new$CollarTemp)
cor(dat$Ibutton_Temp, dat$CollarTemp)
new <- na.omit(new)
cor(new$Ibutton_Temp, new$CollarTemp)
ggplot(new, aes(x=Ibutton_Temp, y = CollarTemp))+geom_smooth()
require(ggeffects)
require(effects)
require(DHARMa)
setwd("/Users/serpent/OneDrive - Van Hall Larenstein/Thesis/Scripts/CommIntegrity")
dat <- read.csv("habitat_affinity.csv") # read habitat affinity data
View(dat)
camtraps  <- read.csv("camtraps_covariates.csv", header = TRUE)[,-10]  # read camtrap data
colnames(camtraps) <- c("Station", "location", "period", "forcov", "foredg", "lat", "long", "Setup_date", "Retrieval_date")
prop <- aggregate(dat$habitat_affinity, by = list(Station = dat$Station), FUN = function(x) {
prop.table(table(x))}) # calculate proportions of habitat affinities
prop <- unnest_wider(prop, x)
colnames(prop) <- c("Station", "FS_prop", "DA_prop")
prop$DA_prop[is.na(prop$DA_prop)] <- 0
prop$FS_prop[is.na(prop$FS_prop)] <- 0
prop <- na.omit(Merge(prop, camtraps[ ,c(1,4,5)], id = ~ Station))
require(Hmisc)
prop <- na.omit(Merge(prop, camtraps[ ,c(1,4,5)], id = ~ Station))
View(prop)
cor(prop$forcov, prop$foredg)
cor.test(prop$forcov, prop$foredg)
option(scipen=666)
options(scipen = 666)
cor.test(prop$forcov, prop$foredg)
cor.test(prop$forcov, prop$foredg, method = "spearman")
plot(prop$forcov, prop$foredg)
View(camtraps)
cor(camtraps$forcov, camtraps$foredg)
cor.test(camtraps$forcov, camtraps$foredg)
